//
//  FreeboxAPI.swift
//  FreeTunes
//
//  Created by Léo Armand on 29/04/2025.
//


import Foundation

struct FreeboxAPI {
    static let baseURL = "http://mafreebox.freebox.fr/api/v14" //HTTP, for personal local use only
    static let basePathEncoded = "L0ZyZWVib3gvTXVzaXF1ZXM=" // /Freebox/Musiques
    static let sessionToken = "pc6YSOMC96zfu37Z4hFK7qNNtLXr+ghY/i74GhS669u+ab6w+eI+sdmLeUl7bo7P" //This is a temp X-Fbx-App-Auth token, should be regenerated by Freebox to work
    
    static func fetchPlaylists() async throws -> [Playlist] {
        let url = URL(string: "\(baseURL)/fs/ls/\(basePathEncoded)")!
        var request = URLRequest(url: url)
        request.setValue(sessionToken, forHTTPHeaderField: "X-Fbx-App-Auth")

        let (data, _) = try await URLSession.shared.data(for: request)
        let decoded = try JSONDecoder().decode(FSResponse.self, from: data)
        let playlists = decoded.result
            .filter { $0.type == "dir" && $0.name != "." && $0.name != ".." }
            .map { Playlist(name: $0.name, path: $0.path) }
        return playlists
    }

    static func fetchTracks(in playlist: Playlist, completion: @escaping ([Track]) -> Void) {
        guard let url = URL(string: "\(baseURL)/fs/ls/\(playlist.path)") else {
            completion([])
            return
        }

        var request = URLRequest(url: url)
        request.setValue(sessionToken, forHTTPHeaderField: "X-Fbx-App-Auth")

        URLSession.shared.dataTask(with: request) { data, _, error in
            guard let data = data, error == nil else {
                completion([])
                return
            }

            do {
                let decoded = try JSONDecoder().decode(FSResponse.self, from: data)
                let mp3Files = decoded.result
                    .filter { $0.type == "file" && $0.name.lowercased().hasSuffix(".mp3") }
                    .map { Track(name: $0.name, path: $0.path) }
                completion(mp3Files)
            } catch {
                completion([])
            }
        }.resume()
    }

    static func downloadTrack(_ track: Track, completion: @escaping (URL?) -> Void) {
        guard let url = URL(string: "\(baseURL)/dl/\(track.path)") else {
            completion(nil)
            return
        }

        var request = URLRequest(url: url)
        request.setValue(sessionToken, forHTTPHeaderField: "X-Fbx-App-Auth")

        URLSession.shared.downloadTask(with: request) { tempURL, _, _ in
            guard let tempURL = tempURL else {
                completion(nil)
                return
            }

            let fileManager = FileManager.default
            let destination = fileManager.temporaryDirectory.appendingPathComponent(track.name)

            do {
                if fileManager.fileExists(atPath: destination.path) {
                    try fileManager.removeItem(at: destination)
                }
                try fileManager.moveItem(at: tempURL, to: destination)
                completion(destination)
            } catch {
                completion(nil)
            }
        }.resume()
    }
}

// MARK: - Models de réponse JSON

struct FSResponse: Decodable {
    let result: [FSItem]
}

struct FSItem: Decodable {
    let name: String
    let path: String
    let type: String
}
